#!/bin/sh
# EliteArch
# (1/3)
printf '\033c'
echo "Welcome to Elite ArchLinux installer"
timedatectl set-timezone Asia/Kolkata
timedatectl status
loadkeys us
timedatectl set-ntp true
lsblk
fdisk -l 
echo "CREATE PARTITIONS ...."
echo -ne "\nEnter your Drive : "
read -e drive 
cfdisk $drive
clear && lsblk
echo -ne "\nEnter the linux partition: "
read -e partition
mkfs.ext4 $partition
echo -ne "\nEnter the Swap partition: "
read -e spartition
echo -ne "Enter EFI partition: "
read -e efipartition
mkfs.vfat -F 32 $efipartition
mkswap $spartition
swapon $spartition
lsblk 
mount $partition /mnt
mkdir -p /mnt/media/storage
echo -ne "\nEnter the second partition: "
read -e partition2
mount $partition2 /mnt/media/storage
lsblk 
cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
ls /etc/pacman.d/
pacman -Sy
pacman -S archlinux-keyring pacman-contrib
rankmirrors -n 10 /etc/pacman.d/mirrorlist.bak > /etc/pacman.d/mirrorlist
pacstrap -i /mnt archlinux-keyring base base-devel linux linux-headers linux-firmware intel-ucode sudo 
 
genfstab -U /mnt > /mnt/etc/fstab
sed '1,/^# (2\/3)$/d' `basename $0` > /mnt/install.sh
chmod +x /mnt/install.sh
arch-chroot /mnt ./install.sh
arch-chroot /mnt

# (2/3)
#!/bin/sh
printf '\033c'
ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime
hwclock --systohc
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen 
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "KEYMAP=us" > /etc/vconsole.conf
printf '\033c'
echo -ne "Hostname: "
read hostname
echo $hostname > /etc/hostname
echo "127.0.0.1       localhost" >> /etc/hosts
echo "::1             localhost" >> /etc/hosts
echo "127.0.1.1       $hostname.localdomain $hostname" >> /etc/hosts
mkinitcpio -P
passwd
pacman --noconfirm -S grub efibootmgr os-prober dosfstools mtools networkmanager network-manager-applet blueman wireless_tools wpa_supplicant dialog ntfs-3g base-devel dhcpcd pulseaudio pulseaudio-bluetooth dash bluez-tools bluez-utils python-neovim neovim alsa-utils git
fdisk -l
echo -ne "Enter EFI partition: " 
read -e efipartition
mkdir /boot/efi
mount $efipartition /boot/efi
lsblk
grub-install --target=x86_64-efi --bootloader-id=GRUB --recheck 
sed -i 's/#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/g' /etc/default/grub 
sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=300/g' /etc/default/grub
grub-mkconfig -o /boot/grub/grub.cfg
systemctl enable NetworkManager.service
systemctl enable dhcpcd.service
systemctl enable bluetooth.service
rm /bin/sh
ln -s dash /bin/sh
echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
printf '\033c'
echo -ne "Enter Username: "
read username
useradd -m $username
usermod -aG wheel,storage,power $username
passwd $username
hypr_el=/home/$username/hypr_install.sh
sed '1,/^# (3\/3)$/d' install.sh > $hypr_el
chown $username:$username $hypr_el
chmod +x $hypr_el
su -c $hypr_el -s /bin/sh $username
echo "Finish Reboot now"
exit

# (3/3)
#!/bin/bash
printf '\033c'
cd $HOME
git_cfg() {

	printf '\033c'
	echo "[!] Setting Up Git config " 
	git config --global user.email "alansedp@gmail.com"
	git config --global user.name "shadowelite"
	git config --global credential.helper store
	git config --global core.editor nvim
}

yay_install() {

	printf '\033c'
	echo "[*] Installing AUR helper "
	sudo pacman -S --needed git base-devel 
	git clone https://aur.archlinux.org/yay.git
	cd yay
	makepkg -sifr

}

hyprland_setup() {

	printf '\033c'
	echo "[*] Installing Hyprland Essenstial pkgs "
	yay -S --noconfirm hyprland-git waybar-hyprland-git hyprpicker-git foot-git swww-git qt5-wayland qt6-wayland polkit-kde-agent xdg-desktop-portal-hyprland-git xwaylandvideobridge-cursor-mode-2-git grim slurp swappy-git mako rofi-lbonn-wayland-git ttf-jetbrains-mono-nerd brightnessctl libpulse python-pywal wal-telegram-git jq zsh starship nodejs npm wl-clipboard wl-clip-persist-git cliphist-bin network-manager-applet nwg-look-bin nwg-dock-hyprland-bin nwg-displays nwg-hello wlr-randr-git cpio swayidle plymouth plymouth-theme-optimus-git wlogout safeeyes
	yay -Rnsdd --noconfirm xdg-desktop-portal xdg-desktop-portal-gnome xdg-desktop-portal-gtk
}

user_apps() {

	printf '\033c'
	echo "[*] Installing User Applications and Utils "
	yay -S --noconfirm stow neovim man man-pages bat xdg-user-dirs firefox-bin python python3 python-pip python-pipx python-pywalfox discord telegram-desktop nemo nemo-fileroller tumbler tumbler-plugins-extra ffmpegthumbnailer gvfs gvfs-mtp colloid-gtk-theme-git colloid-icon-theme-git mpc mpd mpv sxiv ncmpcpp tauon-music-box obs-studio wlrobs-hg bluetoothctl net-tools wireless_tools wget unzip zip tar p7zip grc zathura-pdf-mupdf binder_linux-dkms ranger-git libsixel thefuck glow gum code-minimap-bin cava-git pamixer piper noto-fonts-emoji vimb betterdiscord-installer-bin auto-cpufreq thermald pywal-discord-git visual-studio-code-bin mpv-thumbfast-git linux-wifi-hotspot

	mkdir -p ~/.local/share/themes
	git clone https://github.com/B21q/Corvus.git ~/.local/share/themes/Corvus
}

sec_app() {

	printf '\033c'
	echo "[*] Installing Security Testing Applications " 
	yay -S --noconfirm gdb radare2 ida-free burpsuite ghidra ghex nmap netcat metasploit pwndbg-git python-pwntools python-tabulate python-pycryptodome wireshark-qt python-pycryptodome edb-debugger

}

service_st(){
	sudo modprobe snd_aloop
	sudo systemctl enable auto-cpufreq
	sudo systemctl enable thermald
}

install_dots() {

	printf '\033c'
	echo "[*] Installing Dotfiles "
	rm -rf ~/.config && rm -r ~/.zshrc ~/.bashrc 
	mkdir ~/.config
	git clone --depth=1 https://github.com/shadowelite-sec/hypr ~/.dot
	cd ~/.dot
	stow */
	cd
	systemctl --user enable mpd.service
	pywalfox install
}

install_nvidia(){

	printf '\033c'
	echo "[!] Installing nvidia and Plymouth"
	yay -S --noconfirm nvidia-dkms nvidia-utils libva libva-nvidia-driver-git qt5ct qt5-wayland nvidia-prime
	sudo plymouth-set-default-theme optimus
	sudo sed -i 's/quiet/splash quiet nvidia_drm.modeset=1/g' /etc/default/grub
	sudo sed -i 's/HOOKS=(base udev autodetect modconf kms keyboard keymap consolefont block filesystems fsck)/HOOKS=(base udev autodetect modconf kms plymouth keyboard keymap consolefont block filesystems fsck)/g' /etc/mkinitcpio.conf
	sudo sed -i 's/MODULES=()/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/g' /etc/mkinitcpio.conf
	echo "options nvidia-drm modeset=1" | sudo tee /etc/modprobe.d/nvidia.conf
	echo "blacklist nouveau" | sudo tee /etc/modprobe.d/blacklist.conf
	sudo grub-mkconfig -o /boot/grub/grub.cfg
	sudo mkinitcpio --config /etc/mkinitcpio.conf --generate /boot/initramfs-custom.img
}

penguinf() {
	git clone https://github.com/p3nguin-kun/penguinFox
	cd penguinFox
	./penguinfox-installer.sh
}

# enable Fn 
yay_install 
git_cfg 
hyprland_setup 
install_nvidia
user_apps 
#sec_app 
service_st
penguinf

# zap install 
zsh <(curl -s https://raw.githubusercontent.com/zap-zsh/zap/master/install.zsh) --branch release-v1
install_dots

mkdir ~/code ~/ctf ~/screenshot ~/wall 
wget https://w.wallhaven.cc/full/x8/wallhaven-x8k5zv.png -O ~/wall/1.png


# change shell 
chsh -s /bin/zsh

# bat limiter
wget https://raw.githubusercontent.com/shadowelite-sec/scripts/main/limitd
chmod +x limitd
./limitd 80

# clean
rm ~/limitd
rm -rf ~/yay
sudo rm /install.sh
rm ~/hypr_install.sh
echo "Everything is Done , Now Reboot"
exit
