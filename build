#!/bin/sh
# EliteArch
# (1/3)
printf '\033c'
echo "Welcome to Elite ArchLinux installer"
timedatectl set-timezone Asia/Kolkata
timedatectl status
loadkeys us
timedatectl set-ntp true
lsblk
fdisk -l 
echo "CREATE PARTITIONS ...."
echo -ne "\nEnter your Drive : "
read -e drive 
cfdisk $drive
clear && lsblk
echo -ne "\nEnter the linux partition: "
read -e partition
mkfs.ext4 $partition
echo -ne "\nEnter the Swap partition: "
read -e spartition
echo -ne "Enter EFI partition: "
read -e efipartition
mkfs.vfat -F 32 $efipartition
mkswap $spartition
swapon $spartition
lsblk 
mount $partition /mnt
read -p "Do you want to mount second partition? [y/n]" answer
if [[ $answer = y ]] ; then
	mkdir -p /mnt/media/storage
	echo -ne "\nEnter the second partition: "
	read -e partition2
	mount $partition2 /mnt/media/storage
fi
lsblk 
cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
ls /etc/pacman.d/
pacman -Sy
pacman -S archlinux-keyring pacman-contrib
rankmirrors -n 10 /etc/pacman.d/mirrorlist.bak > /etc/pacman.d/mirrorlist
pacstrap -i /mnt archlinux-keyring base base-devel linux linux-headers linux-firmware intel-ucode sudo 
 
genfstab -U /mnt > /mnt/etc/fstab
sed '1,/^# (2\/3)$/d' `basename $0` > /mnt/install.sh
chmod +x /mnt/install.sh
arch-chroot /mnt ./install.sh
arch-chroot /mnt

# (2/3)
#!/bin/sh
printf '\033c'
ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime
hwclock --systohc
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen 
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "KEYMAP=us" > /etc/vconsole.conf
printf '\033c'
echo -ne "Hostname: "
read hostname
echo $hostname > /etc/hostname
echo "127.0.0.1       localhost" >> /etc/hosts
echo "::1             localhost" >> /etc/hosts
echo "127.0.1.1       $hostname.localdomain $hostname" >> /etc/hosts
mkinitcpio -P
passwd
pacman --noconfirm -S grub efibootmgr os-prober dosfstools mtools networkmanager network-manager-applet blueman wireless_tools wpa_supplicant dialog ntfs-3g base-devel dhcpcd pulseaudio pulseaudio-bluetooth dash bluez-tools bluez-utils python-neovim neovim alsa-utils git
fdisk -l
echo -ne "Enter EFI partition: " 
read -e efipartition
mkdir /boot/efi
mount $efipartition /boot/efi
lsblk
grub-install --target=x86_64-efi --bootloader-id=GRUB --recheck 
sed -i 's/#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/g' /etc/default/grub 
sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=300/g' /etc/default/grub
grub-mkconfig -o /boot/grub/grub.cfg
systemctl enable NetworkManager.service
systemctl enable dhcpcd.service
systemctl enable bluetooth.service
rm /bin/sh
ln -s dash /bin/sh
echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
printf '\033c'
echo -ne "Enter Username: "
read username
useradd -m $username
usermod -aG wheel,storage,power $username
passwd $username
hypr_el=/home/$username/hypr_install.sh
sed '1,/^# (3\/3)$/d' install.sh > $hypr_el
chown $username:$username $hypr_el
chmod +x $hypr_el
su -c $hypr_el -s /bin/sh $username
echo "Finish Reboot now"
exit

# (3/3)
#!/bin/bash
printf '\033c'
cd $HOME
rm ./installation.log

install() {
    for pkg in "$@"; do
        sudo pikaur -S --noconfirm "$pkg"
        if [ $? -ne 0 ]; then
            echo "$pkg" >> installation.log
        fi
    done
}

service_st(){
    sudo gpasswd -a $USER input
    sudo modprobe snd_aloop
    sudo systemctl enable auto-cpufreq
    sudo systemctl enable thermald
    systemctl --user enable pipewire.service wireplumber.service
    systemctl --user enable mpd.service
}

storage(){
    sudo chown shadow:shadow /media/storage 
    ln -s /media/storage/Movies ~/Videos/Movies 
    ln -s /media/storage/courses ~/Videos/courses
}

git_cfg() {

    printf '\033c'
    echo "[!] Setting Up Git config " 
    git config --global user.email "alansedp@gmail.com"
    git config --global user.name "shadowelite"
    git config --global credential.helper store
    git config --global core.editor nvim
}

pikaur_install() {
    sudo pacman -S --needed base-devel git
    git clone https://aur.archlinux.org/pikaur.git
    cd pikaur
    makepkg -fsri --noconfirm

}

install_dots() {

    printf '\033c'
    echo "[*] Installing Dotfiles "
    rm -rf ~/.config && rm -r ~/.zshrc ~/.bashrc 
    mkdir ~/.config
    git clone --depth=1 https://github.com/shadowelite-sec/hypr ~/.dot
    cd ~/.dot
    stow */
    cd
    mkdir ~/code ~/ctf ~/screenshot ~/wall 
    wget https://w.wallhaven.cc/full/x8/wallhaven-x8k5zv.png -O ~/wall/1.png
    mkdir -p ~/.local/share/themes
    git clone --depth=1 https://github.com/B21q/Corvus.git ~/.local/share/themes/Corvus
    pip install --break-system-packages --index-url https://test.pypi.org/simple/ pywalfox==2.8.0rc1
    pywalfox install #--browser librewolf
    git clone https://github.com/p3nguin-kun/penguinFox
    cd penguinFox
    ./penguinfox-installer.sh < ~/.mozilla/firefox/*.default-release
    # zap install 
    zsh <(curl -s https://raw.githubusercontent.com/zap-zsh/zap/master/install.zsh) --branch release-v1
    # change shell 
    chsh -s /bin/zsh
    wget https://raw.githubusercontent.com/shadowelite-sec/scripts/main/limitd
    chmod +x limitd
    ./limitd 80

}

nvidia_plymouth(){

    printf '\033c'
    echo "[!] Installing nvidia and Plymouth"
    sudo plymouth-set-default-theme optimus
    sudo sed -i 's/quiet/splash quiet nvidia_drm.modeset=1/g' /etc/default/grub
    sudo sed -i 's/#GRUB_THEME=.*/GRUB_THEME=\"\/usr\/share\/grub\/themes\/CyberRe\/theme.txt\"/g' /etc/default/grub
    sudo sed -i 's/.*GRUB_DEFAULT=saved.*/GRUB_DEFAULT=saved/g' /etc/default/grub
    sudo sed -i 's/#GRUB_SAVEDEFAULT=true/GRUB_SAVEDEFAULT=true/g' /etc/default/grub
    sudo sed -i 's/HOOKS=(base udev autodetect modconf kms keyboard keymap consolefont block filesystems fsck)/HOOKS=(base udev autodetect modconf kms plymouth keyboard keymap consolefont block filesystems fsck)/g' /etc/mkinitcpio.conf
    sudo sed -i 's/MODULES=()/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/g' /etc/mkinitcpio.conf
    echo "options nvidia-drm modeset=1" | sudo tee /etc/modprobe.d/nvidia.conf
    echo "blacklist nouveau" | sudo tee /etc/modprobe.d/blacklist.conf
    sudo grub-mkconfig -o /boot/grub/grub.cfg
    sudo mkinitcpio --config /etc/mkinitcpio.conf --generate /boot/initramfs-custom.img
}

hypr_pkgs=(
    
    # requirements
    meson 
    cmake 
    brightnessctl 
    libpulse 
    nodejs 
    npm 
    wlr-randr-git 
    cpio 

    # dots manager and file
    stow
    xdg-user-dirs 
    
    # hyprland core
    hyprlang-git 
    hyprwayland-scanner-git 
    hyprland-git 
    xdg-desktop-portal-hyprland-git 
    hypridle-git 
    hyprlock-git 
    hyprpicker-git 
    pipewire
    wireplumber
    waybar-git 
    foot-git 
    swww-git 
    wlogout-git 
    pyprland
    libinput-gestures
    swaync
    rofi-lbonn-wayland-git 

    # waybar font
    ttf-jetbrains-mono-nerd
    
    # clipboard
    wl-clipboard 
    wl-clip-persist-git 
    cliphist 

    # qt
    qt5-wayland 
    qt6-wayland
    qt5ct  
    
    polkit-kde-agent 
    
    # screen shot 
    grim 
    slurp 
    swappy-git 

    # pywal
    python-pywal 
    wal-telegram-git 
    
    # shell
    jq 
    zsh 
    starship 
    
    network-manager-applet 
    
    # grub and splash
    plymouth 
    plymouth-theme-optimus-git 
    grub-theme-cyberre 
    # Add more packages here...
)


sec_pkgs=(
    
    # reverse
    gdb
    radare2
    ghidra 
    ida-free 
    ghex
    pwndbg-git
    python-pwntools 
    python-tabulate 
    python-pycryptodome 
    edb-debugger

    # network
    nmap
    netcat
    wireshark-qt 
    bind

    # exploitation
    metasploit 
    
    # web 
    burpsuite 
    ffuf-bin 
    sqlmap 
    theharvester-git 
    # Add more packages here...
)

user_pkgs=(
    man 
    man-pages 
    
    # browsers
    vimb 
    firefox-bin

    python 
    python3 
    python-pip 
    python-pipx 
    
    # social
    #discord 
    telegram-desktop 
    vesktop-bin

    # media
    nemo 
    nemo-fileroller 
    tumbler 
    ffmpegthumbnailer 
    gvfs 
    gvfs-mtp 
    mpv 
    mpv-thumbfast-git 
    sxiv

    # screen record
    obs-studio 
    wlrobs-hg 
    net-tools 
    wireless_tools 
    
    # basic utils
    wget 
    unzip 
    zip 
    tar
    bat 
    unrar
    p7zip 
    grc 
    zathura-pdf-mupdf 
    ranger-git 
    
    # shell
    libsixel 
    thefuck 
    glow 
    gum

    # mouse and keybord rgb
    piper 
    openrgb

    noto-fonts-emoji 
    betterdiscord-installer-bin 
    
    # termal manager
    auto-cpufreq 
    thermald

    # code
    visual-studio-code-bin 
    neovim 
    
    # network
    linux-wifi-hotspot 

    # hyprvizer
    binder_linux-dkms 
    
    # spotify and music
    spotify-adblock-git
    sptlrx-bin 
    nwg-look-bin
    tauon-music-box 
    mpc 
    mpd 
    ncmpcpp 
    cava-git 
    pamixer 
    # Add more packages here...
)

nvidia_pkgs=(
    nvidia-dkms 
    nvidia-utils 
    libva 
    libva-nvidia-driver-git 
    nvidia-prime
)

pikaur_install 
echo "Installing Hyprland Essential packages"
install "${hypr_pkgs[@]}"

echo "Installing User Applications and Utils"
install "${user_pkgs[@]}"

echo "Installing Security Testing Applications"
install "${sec_pkgs[@]}"

echo "Installing Nvidia Pkgs"
install "${nvidia_pkgs[@]}"

echo "configring nvidia and plymouth"
nvidia_plymouth

git_cfg 
service_st
install_dots
storage


# clean
rm ~/limitd
rm -rf ~/pikaur
sudo rm /install.sh
rm ~/hypr_install.sh
echo "Installation complete."
echo "Everything is Done , Now Reboot"
